name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyYAML>=6.0
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          libgtest-dev \
          libbenchmark-dev \
          pkg-config
          
    - name: Build GoogleTest (if needed)
      run: |
        if [ ! -f /usr/lib/x86_64-linux-gnu/libgtest.a ]; then
          cd /usr/src/gtest
          sudo cmake CMakeLists.txt
          sudo make
          sudo cp lib/*.a /usr/lib
        fi
        
    - name: Run code generation
      run: |
        chmod +x scripts/*.sh
        ./scripts/run_codegen.sh
        
    - name: Configure CMake
      run: |
        mkdir -p engine/build
        cd engine/build
        cmake .. -DCMAKE_BUILD_TYPE=Release -G Ninja
        
    - name: Build project
      run: |
        cd engine/build
        ninja
        
    - name: Run tests
      run: |
        cd engine/build
        ctest --output-on-failure --verbose
        
    - name: Run benchmarks
      run: |
        cd engine/build
        if [ -f tests/cboe_benchmarks ]; then
          ./tests/cboe_benchmarks --benchmark_format=json --benchmark_out=benchmark_results.json
        fi
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          engine/build/test_results.xml
          engine/build/benchmark_results.json
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          engine/build/libcboe_core.a
          engine/build/tests/cboe_tests
          engine/build/tests/cboe_benchmarks

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-format
        
    - name: Run cppcheck
      run: |
        cppcheck --enable=all --inconclusive --std=c++17 \
          --suppress=missingIncludeSystem \
          --error-exitcode=1 \
          engine/src/ engine/include/ tests/
          
    - name: Check code formatting
      run: |
        find engine/src engine/include tests -name "*.cpp" -o -name "*.h" | \
        xargs clang-format --dry-run --Werror

  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Doxygen
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz
        
    - name: Generate documentation
      run: |
        # Create a basic Doxyfile if it doesn't exist
        if [ ! -f Doxyfile ]; then
          doxygen -g
          sed -i 's/PROJECT_NAME           = "My Project"/PROJECT_NAME           = "CBOE BOE Engine"/' Doxyfile
          sed -i 's/INPUT                  =/INPUT                  = engine\/include engine\/src/' Doxyfile
          sed -i 's/RECURSIVE              = NO/RECURSIVE              = YES/' Doxyfile
          sed -i 's/GENERATE_HTML          = YES/GENERATE_HTML          = YES/' Doxyfile
          sed -i 's/HTML_OUTPUT            = html/HTML_OUTPUT            = docs/' Doxyfile
        fi
        doxygen
        
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs

  release:
    name: Create Release
    needs: [build-and-test, code-quality]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: ./artifacts
        
    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        git log --oneline --since="$(git log --format=%ai -1 $(git tag --sort=-creatordate | head -1) 2>/dev/null || echo '1 week ago')" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create tag
      id: tag
      run: |
        VERSION=$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag $VERSION
        git push origin $VERSION
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.VERSION }}
        name: Release ${{ steps.tag.outputs.VERSION }}
        body: |
          ## Changes
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Performance Metrics
          - LoginRequest serialize: ~297ns, deserialize: ~1.73ns
          - NewOrder serialize: ~430ns, deserialize: ~2.00ns
          - Buffer operations: ~7ns, Allocator: ~34ns
          
          ## Artifacts
          - `libcboe_core.a`: Core library
          - `cboe_tests`: Test executable
          - `cboe_benchmarks`: Benchmark executable
        files: |
          artifacts/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
